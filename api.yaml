openapi: 3.0.3
info:
  title: Household Services API
  description: |
    API for a household services management application that connects customers with service professionals.
    The application has three user roles: admin, customer, and professional.
  version: 1.0.0
  contact:
    email: support@household-services.com

servers:
  - url: http://localhost:5000/api
    description: Development server
  - url: https://household-services.com/api
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, customer, professional]
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          default: true
      required:
        - username
        - email
        - role

    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        description:
          type: string
        base_price:
          type: number
          format: float
        time_required:
          type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
          default: true
      required:
        - name
        - base_price

    Professional:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        user_id:
          type: integer
          format: int64
        service_id:
          type: integer
          format: int64
        experience:
          type: integer
        description:
          type: string
        verification_status:
          type: string
          enum: [pending, approved, rejected]
          default: pending
        documents:
          type: string
        address:
          type: string
        pin_code:
          type: string
        phone:
          type: string
      required:
        - user_id
        - service_id

    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        user_id:
          type: integer
          format: int64
        address:
          type: string
        pin_code:
          type: string
      required:
        - user_id
        - address

    ServiceRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        service_id:
          type: integer
          format: int64
        customer_id:
          type: integer
          format: int64
        professional_id:
          type: integer
          format: int64
        date_of_request:
          type: string
          format: date-time
          readOnly: true
        date_of_completion:
          type: string
          format: date-time
        service_status:
          type: string
          enum: [requested, assigned, accepted, rejected, completed, closed]
          default: requested
        remarks:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - service_id
        - customer_id

    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        service_request_id:
          type: integer
          format: int64
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comments:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - service_request_id
        - rating

    ExportJob:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        user_id:
          type: integer
          format: int64
        job_type:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
          default: pending
        file_path:
          type: string
        file_name:
          type: string
        filter_params:
          type: string
        error_message:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        completed_at:
          type: string
          format: date-time
      required:
        - user_id
        - job_type

    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
      required:
        - message
        - user
        - token

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      required:
        - message

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Missing username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/logout:
    post:
      summary: User logout
      description: Logout the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/register/customer:
    post:
      summary: Register a new customer
      description: Create a new customer account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                fullname:
                  type: string
                address:
                  type: string
                pin_code:
                  type: string
              required:
                - username
                - email
                - password
                - fullname
                - address
                - pin_code
      responses:
        '201':
          description: Customer registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Missing required fields or username/email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/register/professional:
    post:
      summary: Register a new professional
      description: Create a new professional account with document upload
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                fullname:
                  type: string
                service_id:
                  type: integer
                experience:
                  type: integer
                description:
                  type: string
                address:
                  type: string
                pin_code:
                  type: string
                phone:
                  type: string
                documents:
                  type: string
                  format: binary
              required:
                - username
                - email
                - password
                - service_id
                - experience
                - documents
      responses:
        '201':
          description: Professional registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Missing required fields or username/email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/user-info:
    get:
      summary: Get current user information
      description: Return information about the currently authenticated user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  user_details:
                    oneOf:
                      - $ref: '#/components/schemas/Professional'
                      - $ref: '#/components/schemas/Customer'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/services:
    get:
      summary: Get all available services
      description: Return a list of all active services
      tags:
        - Public
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
  
  /admin/dashboard:
    get:
      summary: Get admin dashboard data
      description: Return statistics and summary data for the admin dashboard
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data
          content:
            application/json:
              schema:
                type: object
                properties:
                  services_count:
                    type: integer
                  professionals_count:
                    type: integer
                  customers_count:
                    type: integer
                  requests_count:
                    type: integer
                  request_status_counts:
                    type: object
                  popular_services:
                    type: array
                    items:
                      type: object
                  recent_requests:
                    type: array
                    items:
                      type: object
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /admin/services:
    get:
      summary: Get all services
      description: Return a list of all services for admin management
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new service
      description: Create a new service for customers to request
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  service:
                    $ref: '#/components/schemas/Service'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customer/service-requests:
    get:
      summary: Get customer's service requests
      description: Return all service requests created by the authenticated customer
      tags:
        - Customer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of service requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceRequest'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new service request
      description: Create a new service request as a customer
      tags:
        - Customer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                service_id:
                  type: integer
                  format: int64
                remarks:
                  type: string
              required:
                - service_id
      responses:
        '201':
          description: Service request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  service_request:
                    $ref: '#/components/schemas/ServiceRequest'
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /professional/service-requests:
    get:
      summary: Get professional's service requests
      description: Return all service requests assigned to the authenticated professional
      tags:
        - Professional
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of service requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceRequest'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # This is a partial API documentation with key endpoints
  # Additional endpoints would be documented similarly for:
  # - Service request management
  # - Professional verification
  # - Reviews
  # - User profile management
  # - Export functionality
  # - Reporting 